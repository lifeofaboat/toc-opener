/*******************************************************************************
 * Copyright (c) 2009, Rockwell Automation, Inc.
 * All rights reserved. 
 *
 * Contributors:
 *     <date>: <author>, <author email> - changes
 ******************************************************************************/
#ifndef OPENER_USER_CONF_H_
#define OPENER_USER_CONF_H_

/*! \file
 * \brief OpENer configuration setup
 * 
 * This file contains the general application specific configuration for OpENer.
 * 
 * Furthermore you have to specific platform specific network include files.
 * OpENer needs definitions for the following data-types
 * and functions:
 *    - struct sockaddr_in
 *    - AF_INET
 *    - INADDR_ANY
 *    - htons
 *    - ntohl
 *    - inet_addr
 */
#include <netinet/in.h>
#include <sys/socket.h>
#include <arpa/inet.h>


/*! Identity configuration of the device */
#define OPENER_DEVICE_VENDOR_ID           1
#define OPENER_DEVICE_TYPE               12
#define OPENER_DEVICE_PRODUCT_CODE      200
#define OPENER_DEVICE_MAJOR_REVISION      1
#define OPENER_DEVICE_MINOR_REVISION      2
#define OPENER_DEVICE_NAME      "ENetIP EC"

/*! Define the number of supported connections (Class 0, 1, and 3 together)
 */  
#define OPENER_NUMBER_OF_SUPPORTED_CONNECTIONS 10


/*! The number of bytes used for the Ethernet message buffer.
 *  This buffer size will be used for any received message.
 *  The same buffer is used for the replied explicit message.
 */ 
#define OPENER_ETHERNET_BUFFER_SIZE 512


/*! The number of bytes used for the buffer that will be used for generating any
 *  reply data of messages. There are two uses in OpENer:
 *    1. Explicit messages will use this buffer to store the data generated by the request
 *    2. I/O Connections will use this buffer for the produced data
 */ 
#define OPENER_MESSAGE_DATA_REPLY_BUFFER 100

/*! Number of sessions that can be handled at the same time
 */ 
#define OPENER_NUMBER_OF_SUPPORTED_SESSIONS 4

/*! The time in ms of the timer used in this implementations
 */ 
#define OPENER_TIMER_TICK 10 


/*! Define if RUN IDLE data is sent with consumed data
 */ 
#define OPENER_CONSUMED_DATA_HAS_RUN_IDLE_HEADER 1

#ifdef OPENER_WITH_TRACES
/* If we have tracing enabled provide print tracing macro */
#include <stdio.h>

#define LOG_TRACE(args...)  fprintf(stderr,args)

/*#define PRINT_TRACE(args...)  fprintf(stderr,args);*/

#endif

#endif /*OPENER_USER_CONF_H_*/
